.rowHeader {
  composes: gridRowHeader from "./Grid.module.css";

  align-items: flex-start;
  justify-content: flex-end;

  padding-block: calc(var(--spacing) * 4);
  padding-inline-end: 0;
}

.bgSpan {
  position: relative;
  display: flex;
  align-items: flex-end;
  padding: calc(var(--spacing) * 4);

  &.dark {
    position: relative;

    grid-column-end: span max(1, var(--bg-light-started-at));
    justify-content: flex-end;

    color: var(--bg-light);

    background-color: var(--bg-dark);
  }

  &.single {
    grid-column: 2 / span var(--grid-levels);
    justify-content: center;
    background-color: var(--bg-light);

    [bg-mode="dark"] & {
      background-color: var(--bg-dark);
    }
  }

  &.light {
    z-index: 1;
    grid-column: calc(var(--bg-light-started-at) + 2) / -1;
    color: var(--bg-dark);
    background-color: var(--bg-light);

    [data-horizontally-scrolled] & {
      z-index: 0;
    }
  }
}

.endSpacerCell {
  grid-column: -3 / -1;
  background-color: var(--bg-light);
}

.bgControlContainer {
  container: bgControl / inline-size;
  display: flex;
  flex-grow: 1;
  gap: calc(var(--spacing) * 1.5);
  align-items: center;
  justify-content: flex-end;

  .light & {
    flex-direction: row-reverse;
  }

  .single & {
    justify-content: center;
  }
}

.hideWhenTwoColumns {
  @container bgControl (max-inline-size: 200px) {
    display: none;
  }
}

.hideWhenSingleColumn {
  @container bgControl (max-inline-size: 150px) {
    display: none;
  }
}

.singleModeLabel {
  text-transform: capitalize;
}

.bgColorInput {
  --input-max-inline-size: 7ch;
}

.dragContainer {
  position: absolute;
  inset-block: 0;
  inset-inline-start: 0;
  translate: -50%;

  display: flex;
  flex-direction: column;
  justify-content: flex-end;

  &:dir(rtl) {
    translate: 50%;
  }
}

.dragButton {
  touch-action: none;
  cursor: col-resize;

  position: relative;
  z-index: 1;

  margin-block-end: calc(var(--spacing) * 4 + 1px);

  color: var(--color-primary-light);

  background-color: var(--color-border-solid);

  &:hover {
    background-color: oklch(from var(--color-border-solid) calc(l - 0.1) c h);
  }

  &:focus-visible,
  .light:hover &,
  :is(.rowHeader, .dark):hover ~ .light & {
    opacity: 1;
  }

  @media (hover: hover) {
    opacity: 0;
  }
}

.highlitingLine {
  --hightlighting-bg: ;

  pointer-events: none;

  position: absolute;
  inset-block-end: 0;
  inset-inline-start: 50%;
  translate: -50%;

  inline-size: 2px;
  block-size: 1000vh;

  opacity: 0;
  background-color: var(--color-highlight);

  &:dir(rtl) {
    translate: 50%;
  }

  .dragButton:hover ~ & {
    opacity: 1;
  }
}
